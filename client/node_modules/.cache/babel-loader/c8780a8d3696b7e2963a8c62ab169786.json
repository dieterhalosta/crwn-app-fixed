{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\halosd\\\\Desktop\\\\ReactApp\\\\crwn-app\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyAPbYptGXfnv8JE9CUAw7IInK3LRNJvgL8\",\n  authDomain: \"crwn-db-1c249.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-1c249.firebaseio.com\",\n  projectId: \"crwn-db-1c249\",\n  storageBucket: \"\",\n  messagingSenderId: \"471447466533\",\n  appId: \"1:471447466533:web:c6da9128fe045c1cc885cc\",\n  measurementId: \"G-Y0EW5H07G6\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(\"users/\".concat(userAuth.uid));\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionsAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collectionsSnapShot => {\n  const transformedCollection = collectionsSnapShot.docs.map(docSnapShot => {\n    const _docSnapShot$data = docSnapShot.data(),\n          title = _docSnapShot$data.title,\n          items = _docSnapShot$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: docSnapShot.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["C:\\Users\\halosd\\Desktop\\ReactApp\\crwn-app\\client\\src\\firebase\\firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionsAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collectionsSnapShot","transformedCollection","docs","map","docSnapShot","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyAPbYptGXfnv8JE9CUAw7IInK3LRNJvgL8\",\n  authDomain: \"crwn-db-1c249.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-1c249.firebaseio.com\",\n  projectId: \"crwn-db-1c249\",\n  storageBucket: \"\",\n  messagingSenderId: \"471447466533\",\n  appId: \"1:471447466533:web:c6da9128fe045c1cc885cc\",\n  measurementId: \"G-Y0EW5H07G6\"\n};\n\nfirebase.initializeApp(config);\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\n\nexport const addCollectionsAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n\n  await batch.commit();\n};\n\nexport const convertCollectionsSnapshotToMap = collectionsSnapShot => {\n  const transformedCollection = collectionsSnapShot.docs.map(docSnapShot => {\n    const { title, items } = docSnapShot.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: docSnapShot.id,\n      title,\n      items\n    };\n  });\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}